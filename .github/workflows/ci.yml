name: Nodejs Checks, Docker build, scan and push

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  # Job 1 - Node.js Checks (Test, Build)

  node-checks:
    runs-on: ubuntu-latest
    name: Node.js Checks (Test, Build)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js on the runner
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run tests
      - name: Run tests
        run: npm test

      # Build the project
      - name: Build the project
        run: npm run build

  # Job 2 - Docker Build, Scan and Push
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build, Scan and Push
    needs: node-checks

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Login into Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set Image name & Tag
      - name: Set Image name & Tag
        uses: docker/metadata-action@v5
        id: docker_meta # Give this step an ID to reference its outputs
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

          # Set the image name to the repository name
          tags: |
            type=ref,event=branch  
            type=sha
            type=semver,pattern={{version}},prefix=v
            type=raw,value=latest,enable=${{
              github.event_name == 'push' && github.ref == 'refs/heads/master'
            }}
            type=raw,value=${{ github.sha }}

      # Build the Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # tags: ${{ steps.docker_meta.outputs.tags }} # Use the tags generated by the metadata action
          labels: ${{ steps.docker_meta.outputs.labels }} # Use the labels generated by the metadata action
          push: false
          load: true # Load the image into the local Docker daemon for scanning

      # Scan the Docker image with Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.docker_meta.outputs.tags }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      # Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }} # Use the tags generated by the metadata action
          push: true
          load: false # Do not load the image into the local Docker daemon again
